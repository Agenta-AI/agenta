name: agenta-oss-dev

services:
    web:
        profiles:
            - with-web

        build:
            context: ../../../web
            dockerfile: oss/docker/Dockerfile.dev
         
        volumes:
            - ../../../web/oss/src:/app/oss/src
            - ../../../web/oss/public:/app/oss/public

        env_file:
            - ${ENV_FILE:-./.env.oss.dev}
            
        ports:
            - "3000:3000"
        networks:
            - agenta-network
        labels:
            - "traefik.http.routers.agenta-web.rule=PathPrefix(`/`)"
            - "traefik.http.routers.agenta-web.entrypoints=web"
            - "traefik.http.services.agenta-web.loadbalancer.server.port=3000"
        
        command: sh -c "pnpm dev-oss"
        
        restart: always

    api:
        build: 
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.dev

        volumes:
            - ../../../api/entrypoint.py:/app/entrypoint.py
            - ../../../api/oss:/app/oss
            # - ../../../sdk:/sdk

        env_file:
            - ${ENV_FILE:-./.env.oss.dev}
        
        labels:
            - "traefik.http.routers.api.rule=PathPrefix(`/api/`)"
            - "traefik.http.routers.api.entrypoints=web"
            - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
            - "traefik.http.middlewares.api-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.api.middlewares=api-strip"
            - "traefik.http.services.api.loadbalancer.server.port=8000"
            - "traefik.http.routers.api.service=api"

        networks:
            - agenta-network
        extra_hosts:
            - "host.docker.internal:host-gateway"

        command:
            [
                "uvicorn",
                "entrypoint:app",
                "--host",
                "0.0.0.0",
                "--port",
                "8000",
                "--reload",
                "--root-path",
                "/api",
            ]

        depends_on:
            postgres:
                condition: service_healthy
            alembic:
                condition: service_completed_successfully
        restart: always

    worker:
        build: 
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.dev

        volumes:
            - ../../../api/entrypoint.py:/app/entrypoint.py
            - ../../../api/oss:/app/oss
            # - ../../../sdk:/sdk

        env_file:
            - ${ENV_FILE:-./.env.oss.dev}

        depends_on:
            - postgres
            - rabbitmq
            - redis

        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - agenta-network
        restart: always

        command: >
            watchmedo auto-restart --directory=/app/ --pattern=*.py --recursive -- celery -A entrypoint.celery_app worker --concurrency=1 --max-tasks-per-child=1 --prefetch-multiplier=1

    alembic:
        build: 
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.dev

        volumes:
            - ../../../api/entrypoint.py:/app/entrypoint.py
            - ../../../api/oss:/app/oss
            # - ../../../sdk:/sdk

        env_file:
            - ${ENV_FILE:-./.env.oss.dev}

        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - agenta-network

        command: sh -c "python -m oss.databases.postgres.migrations.runner"

    completion:
        build: 
            context: ../../../services/completion
            dockerfile: oss/docker/Dockerfile.dev

        volumes:
            - ../../../services/completion:/app
            - ../../../sdk:/sdk

        env_file:
            - ${ENV_FILE:-./.env.oss.dev}

        networks:
            - agenta-network
        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.completion.rule=PathPrefix(`/services/completion/`)"
            - "traefik.http.routers.completion.entrypoints=web"
            - "traefik.http.middlewares.completion-strip.stripprefix.prefixes=/services/completion"
            - "traefik.http.middlewares.completion-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.completion.middlewares=completion-strip"
            - "traefik.http.services.completion.loadbalancer.server.port=80"
            - "traefik.http.routers.completion.service=completion"
        
        command: ["python", "oss/src/main.py"]
        
        restart: always
    
    chat:
        build: 
            context: ../../../services/chat
            dockerfile: oss/docker/Dockerfile.dev

        volumes:
            - ../../../services/chat:/app
            - ../../../sdk:/sdk

        env_file:
            - ${ENV_FILE:-./.env.oss.dev}

        networks:
            - agenta-network
        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.chat.rule=PathPrefix(`/services/chat/`)"
            - "traefik.http.routers.chat.entrypoints=web"
            - "traefik.http.middlewares.chat-strip.stripprefix.prefixes=/services/chat"
            - "traefik.http.middlewares.chat-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.chat.middlewares=chat-strip"
            - "traefik.http.services.chat.loadbalancer.server.port=80"
            - "traefik.http.routers.chat.service=chat"

        command: ["python", "oss/src/main.py"]
    
        restart: always

    postgres:
        image: postgres:16.2
        
        restart: always
        ports:
            - "5432:5432"
        networks:
            - agenta-network
        env_file:
            - ${ENV_FILE:-./.env.oss.dev}
        volumes:
            - postgres-data:/var/lib/postgresql/data/
            - ../../../api/oss/databases/postgres/init-db-oss.sql:/docker-entrypoint-initdb.d/init-db.sql
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U username -d agenta_oss_core"]
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        image: rabbitmq:3-management
        
        ports:
            - "${RABBITMQ_PORT:-5672}:5672"
            - "${RABBITMQ_UI_PORT:-15672}:15672"
        volumes:
            - rabbitmq-data:/var/lib/rabbitmq
        env_file:
            - ${ENV_FILE:-./.env.oss.dev}
        networks:
            - agenta-network
        restart: always

    redis:
        image: redis:latest
        networks:
            - agenta-network
        volumes:
            - redis-data:/data
        restart: always

    cache:
        image: redis:latest

        command: >
            redis-server
            --port 6378
            --appendonly no
            --appendfsync no
            --save ""
            --maxmemory 128mb
            --maxmemory-policy allkeys-lru

        ports:
            - "6378:6378"

        volumes:
            - cache-data:/data

        networks:
            - agenta-network

        labels:
            - "traefik.enable=false"

        restart: always

        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6378", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 5s

    traefik:
        image: traefik:v2.10
        
        command: --api.dashboard=true --api.insecure=true --providers.docker --entrypoints.web.address=:${TRAEFIK_PORT:-80}
        ports:
            - "${TRAEFIK_PORT:-80}:${TRAEFIK_PORT:-80}"
            - "${TRAEFIK_UI_PORT:-8080}:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - agenta-network
        restart: always

    supertokens:
        image: registry.supertokens.io/supertokens/supertokens-postgresql

        depends_on:
            postgres:
                condition: service_healthy
        ports:
            - 3567:3567
        
        env_file:
            - ${ENV_FILE:-./.env.oss.dev}

        environment:
            POSTGRESQL_CONNECTION_URI: ${POSTGRES_URI_SUPERTOKENS}

        networks:
            - agenta-network
        healthcheck:
            test: >
                bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
            interval: 10s
            timeout: 5s
            retries: 5
        restart: always

networks:
    agenta-network:

volumes:
    postgres-data:
    rabbitmq-data:
    redis-data:
    cache-data:
    nextjs_cache:
