name: agenta-oss-gh

services:
    web:
        profiles:
            - with-web

        image: ghcr.io/agenta-ai/${AGENTA_WEB_IMAGE_NAME:-agenta-web}:${AGENTA_WEB_IMAGE_TAG:-latest}

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        networks:
            - agenta-oss-gh-network
        labels:
            - "traefik.http.routers.agenta-web.rule=PathPrefix(`/`)"
            - "traefik.http.routers.agenta-web.entrypoints=web"
            - "traefik.http.services.agenta-web.loadbalancer.server.port=3000"

        command: sh -c "node ./oss/server.js"
        restart: always

    api:
        build:
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/${AGENTA_API_IMAGE_NAME:-agenta-api}:${AGENTA_API_IMAGE_TAG:-latest}

        networks:
            - agenta-oss-gh-network
        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.api.rule=PathPrefix(`/api/`)"
            - "traefik.http.routers.api.entrypoints=web"
            - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
            - "traefik.http.middlewares.api-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.api.middlewares=api-strip"
            - "traefik.http.services.api.loadbalancer.server.port=8000"
            - "traefik.http.routers.api.service=api"

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        command: [ "uvicorn", "entrypoint:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--root-path", "/api" ]

        depends_on:
            postgres:
                condition: service_healthy
            alembic:
                condition: service_completed_successfully
        restart: always

    worker:
        build:
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/${AGENTA_API_IMAGE_NAME:-agenta-api}:${AGENTA_API_IMAGE_TAG:-latest}

        networks:
            - agenta-oss-gh-network
        extra_hosts:
            - "host.docker.internal:host-gateway"

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        command: >
            celery -A entrypoint.celery_app worker --concurrency=1

        depends_on:
            - postgres
            - rabbitmq
            - redis
        restart: always

    alembic:
        build:
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/${AGENTA_API_IMAGE_NAME:-agenta-api}:${AGENTA_API_IMAGE_TAG:-latest}

        networks:
            - agenta-oss-gh-network

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        command: sh -c "python -c 'from oss.databases.postgres.migrations.utils import split_core_and_tracing as split; split(); from oss.databases.postgres.migrations.core.utils import run_alembic_migration as run; run(); from oss.databases.postgres.migrations.tracing.utils import run_alembic_migration as run; run(); from oss.databases.postgres.migrations.utils import copy_nodes_from_core_to_tracing as copy; copy();'"

        depends_on:
            postgres:
                condition: service_healthy

    completion:
        build:
            context: ../../../services/completion
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-completion

        networks:
            - agenta-oss-gh-network
        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.completion.rule=Host(`${TRAEFIK_DOMAIN}`) && PathPrefix(`/services/completion/`)"
            - "traefik.http.routers.completion.entrypoints=web"
            - "traefik.http.middlewares.completion-strip.stripprefix.prefixes=/services/completion"
            - "traefik.http.middlewares.completion-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.completion.middlewares=completion-strip"
            - "traefik.http.services.completion.loadbalancer.server.port=80"
            - "traefik.http.routers.completion.service=completion"

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        command: [ "python", "oss/src/main.py" ]

        restart: always

    chat:
        build:
            context: ../../../services/chat
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-chat

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}
        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.chat.rule=Host(`${TRAEFIK_DOMAIN}`) && PathPrefix(`/services/chat/`)"
            - "traefik.http.routers.chat.entrypoints=web"
            - "traefik.http.middlewares.chat-strip.stripprefix.prefixes=/services/chat"
            - "traefik.http.middlewares.chat-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.chat.middlewares=chat-strip"
            - "traefik.http.services.chat.loadbalancer.server.port=80"
            - "traefik.http.routers.chat.service=chat"
        networks:
            - agenta-oss-gh-network

        command: [ "python", "oss/src/main.py" ]

        restart: always

    postgres:
        image: postgres:16.2

        volumes:
            - postgres-data:/var/lib/postgresql/data/
            - ../../../api/oss/databases/postgres/init-db-oss.sql:/docker-entrypoint-initdb.d/init-db.sql

        restart: always
        networks:
            - agenta-oss-gh-network

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        ports:
            - "${POSTGRES_PORT:-5432}:5432"

        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U username -d agenta_oss_core" ]
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        image: rabbitmq:3-management

        volumes:
            - rabbitmq-data:/var/lib/rabbitmq

        networks:
            - agenta-oss-gh-network

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        ports:
            - "${RABBITMQ_PORT:-5672}:5672"
            - "${RABBITMQ_UI_PORT:-15672}:15672"

        restart: always

    redis:
        image: redis:latest

        volumes:
            - redis-data:/data

        networks:
            - agenta-oss-gh-network

        restart: always

    cache:
        image: redis:latest

        command: >
            redis-server --port 6378 --appendonly no --appendfsync no --save "" --maxmemory 128mb --maxmemory-policy allkeys-lru

        ports:
            - "6378:6378"

        volumes:
            - cache-data:/data

        networks:
            - agenta-oss-gh-network

        labels:
            - "traefik.enable=false"

        restart: always

        healthcheck:
            test: [ "CMD", "redis-cli", "-p", "6378", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 5s

    traefik:
        image: traefik:v2.10
        profiles:
            - with-traefik
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - agenta-oss-gh-network

        command:
            - --api.dashboard=true
            - --providers.docker
            - --entrypoints.web.address=:80
        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        ports:
            - "${TRAEFIK_PORT:-80}:80"
            - "${TRAEFIK_UI_PORT:-8080}:8080"

        restart: always

    nginx:
        image: nginx:latest
        profiles:
            - with-nginx
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

        networks:
            - agenta-oss-gh-network

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        ports:
            - "${NGINX_PORT:-80}:80"
        restart: always

        depends_on:
            - api
            - web

    supertokens:
        image: registry.supertokens.io/supertokens/supertokens-postgresql

        depends_on:
            postgres:
                condition: service_healthy
        ports:
            - "${SUPERTOKENS_PORT:-3567}:3567"

        env_file:
            - ${ENV_FILE:-./.env.oss.gh}

        environment:
            POSTGRESQL_CONNECTION_URI: ${POSTGRES_URI_SUPERTOKENS}

        networks:
            - agenta-oss-gh-network
        healthcheck:
            test: >
                bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
            interval: 10s
            timeout: 5s
            retries: 5
        restart: always

networks:
    agenta-oss-gh-network:

volumes:
    postgres-data:
    rabbitmq-data:
    redis-data:
    cache-data: