# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .evaluation_scenario_input import EvaluationScenarioInput
from .evaluation_scenario_output import EvaluationScenarioOutput
from .evaluation_scenario_result import EvaluationScenarioResult

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EvaluationScenario(pydantic.BaseModel):
    id: typing.Optional[str]
    evaluation_id: str
    inputs: typing.List[EvaluationScenarioInput]
    outputs: typing.List[EvaluationScenarioOutput]
    evaluation: typing.Optional[str]
    correct_answer: typing.Optional[str]
    is_pinned: typing.Optional[bool]
    note: typing.Optional[str]
    results: typing.List[EvaluationScenarioResult]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
