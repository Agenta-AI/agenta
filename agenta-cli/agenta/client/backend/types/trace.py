# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .feedback import Feedback

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Trace(pydantic.BaseModel):
    app_id: typing.Optional[str]
    variant_id: typing.Optional[str]
    cost: typing.Optional[float]
    latency: float
    status: str
    token_consumption: typing.Optional[int]
    tags: typing.Optional[typing.List[str]]
    start_time: dt.datetime
    end_time: dt.datetime
    trace_id: str
    spans: typing.List[str]
    feedbacks: typing.Optional[typing.List[Feedback]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
