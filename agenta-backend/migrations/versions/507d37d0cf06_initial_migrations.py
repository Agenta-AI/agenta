"""Initial migrations

Revision ID: 507d37d0cf06
Revises: 
Create Date: 2024-06-06 11:07:23.708513

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '507d37d0cf06'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('IMAGE', 'ZIP', name='templatetype'), nullable=False),
    sa.Column('template_uri', sa.String(), nullable=True),
    sa.Column('tag_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('repo_name', sa.String(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('digest', sa.String(), nullable=True),
    sa.Column('last_pushed', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('uid', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_users_uid'), 'users', ['uid'], unique=True)
    op.create_table('app_db',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_name', sa.String(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('docker_images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('template_uri', sa.String(), nullable=True),
    sa.Column('docker_id', sa.String(), nullable=True),
    sa.Column('tags', sa.String(), nullable=True),
    sa.Column('deletable', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_docker_images_docker_id'), 'docker_images', ['docker_id'], unique=False)
    op.create_table('deployments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('container_name', sa.String(), nullable=True),
    sa.Column('container_id', sa.String(), nullable=True),
    sa.Column('uri', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('testsets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('csvdata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('bases',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('base_name', sa.String(), nullable=True),
    sa.Column('image_id', sa.UUID(), nullable=True),
    sa.Column('deployment_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['deployment_id'], ['deployments.id'], ),
    sa.ForeignKeyConstraint(['image_id'], ['docker_images.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('app_variants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('variant_name', sa.String(), nullable=True),
    sa.Column('revision', sa.Integer(), nullable=True),
    sa.Column('image_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('modified_by_id', sa.UUID(), nullable=True),
    sa.Column('base_name', sa.String(), nullable=True),
    sa.Column('base_id', sa.UUID(), nullable=True),
    sa.Column('config_name', sa.String(), nullable=False),
    sa.Column('config_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['base_id'], ['bases.id'], ),
    sa.ForeignKeyConstraint(['image_id'], ['docker_images.id'], ),
    sa.ForeignKeyConstraint(['modified_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('app_variant_revisions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('revision', sa.Integer(), nullable=True),
    sa.Column('modified_by_id', sa.UUID(), nullable=True),
    sa.Column('base_id', sa.UUID(), nullable=True),
    sa.Column('config_name', sa.String(), nullable=False),
    sa.Column('config_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['base_id'], ['bases.id'], ),
    sa.ForeignKeyConstraint(['modified_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['variant_id'], ['app_variants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('environments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('revision', sa.Integer(), nullable=True),
    sa.Column('deployed_app_variant_id', sa.Integer(), nullable=True),
    sa.Column('deployed_app_variant_revision_id', sa.UUID(), nullable=True),
    sa.Column('deployment_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['deployed_app_variant_revision_id'], ['app_variant_revisions.id'], ),
    sa.ForeignKeyConstraint(['deployment_id'], ['deployments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('evaluations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('status', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('testset_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('variant_revision_id', sa.UUID(), nullable=True),
    sa.Column('aggregated_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('average_cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('average_latency', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['testset_id'], ['testsets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['variant_id'], ['app_variants.id'], ),
    sa.ForeignKeyConstraint(['variant_revision_id'], ['app_variant_revisions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('human_evaluations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('evaluation_type', sa.String(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('variant_revision_id', sa.UUID(), nullable=True),
    sa.Column('testset_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['testset_id'], ['testsets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['variant_id'], ['app_variants.id'], ),
    sa.ForeignKeyConstraint(['variant_revision_id'], ['app_variant_revisions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('environments_revisions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('environment_id', sa.UUID(), nullable=True),
    sa.Column('revision', sa.Integer(), nullable=True),
    sa.Column('modified_by_id', sa.UUID(), nullable=True),
    sa.Column('deployed_app_variant_revision_id', sa.Integer(), nullable=True),
    sa.Column('deployment_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['environment_id'], ['environments.id'], ),
    sa.ForeignKeyConstraint(['modified_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('evaluation_scenarios',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('evaluation_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('correct_answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_pinned', sa.Boolean(), nullable=True),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('latency', sa.Integer(), nullable=True),
    sa.Column('cost', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['evaluation_id'], ['evaluations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['variant_id'], ['app_variants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('human_evaluations_scenarios',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('evaluation_id', sa.UUID(), nullable=True),
    sa.Column('vote', sa.String(), nullable=True),
    sa.Column('score', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('correct_answer', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_pinned', sa.Boolean(), nullable=True),
    sa.Column('note', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['evaluation_id'], ['human_evaluations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('evaluation_scenario_inputs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scenario_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['evaluation_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('evaluation_scenario_outputs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scenario_id', sa.UUID(), nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('latency', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['evaluation_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('evaluators_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('evaluation_id', sa.UUID(), nullable=True),
    sa.Column('evaluation_scenario_id', sa.UUID(), nullable=True),
    sa.Column('app_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('evaluator_key', sa.String(), nullable=True),
    sa.Column('settings_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app_db.id'], ),
    sa.ForeignKeyConstraint(['evaluation_id'], ['evaluations.id'], ),
    sa.ForeignKeyConstraint(['evaluation_scenario_id'], ['evaluation_scenarios.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('human_evaluation_scenario_inputs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scenario_id', sa.UUID(), nullable=True),
    sa.Column('input_name', sa.String(), nullable=True),
    sa.Column('input_value', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['human_evaluations_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('human_evaluation_scenario_outputs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scenario_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.String(), nullable=True),
    sa.Column('variant_output', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['human_evaluations_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('human_evaluation_scenario_outputs')
    op.drop_table('human_evaluation_scenario_inputs')
    op.drop_table('evaluators_configs')
    op.drop_table('evaluation_scenario_outputs')
    op.drop_table('evaluation_scenario_inputs')
    op.drop_table('human_evaluations_scenarios')
    op.drop_table('evaluation_scenarios')
    op.drop_table('environments_revisions')
    op.drop_table('human_evaluations')
    op.drop_table('evaluations')
    op.drop_table('environments')
    op.drop_table('app_variant_revisions')
    op.drop_table('app_variants')
    op.drop_table('bases')
    op.drop_table('testsets')
    op.drop_table('deployments')
    op.drop_index(op.f('ix_docker_images_docker_id'), table_name='docker_images')
    op.drop_table('docker_images')
    op.drop_table('app_db')
    op.drop_index(op.f('ix_users_uid'), table_name='users')
    op.drop_table('users')
    op.drop_table('templates')
    # ### end Alembic commands ###
