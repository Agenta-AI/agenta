x-networks: &networks
    networks:
        - agenta-network
    extra_hosts:
        - "host.docker.internal:host-gateway"

x-common: &common
    <<: *networks
    env_file: ".env.ghcr"
    restart: always

x-services: &services
    <<: *common
    environment:
        - AGENTA_HOST=http://host.docker.internal
    labels:
        - "traefik.http.routers.${SERVICE_NAME}.rule=PathPrefix(`/services/${SERVICE_NAME}/`)"
        - "traefik.http.routers.${SERVICE_NAME}.entrypoints=web"
        - "traefik.http.middlewares.${SERVICE_NAME}-strip.stripprefix.prefixes=/services/${SERVICE_NAME}"
        - "traefik.http.middlewares.${SERVICE_NAME}-strip.stripprefix.forceslash=true"
        - "traefik.http.routers.${SERVICE_NAME}.middlewares=${SERVICE_NAME}-strip"
        - "traefik.http.services.${SERVICE_NAME}.loadbalancer.server.port=80"
        - "traefik.http.routers.${SERVICE_NAME}.service=${SERVICE_NAME}"

services:
    reverse-proxy:
        <<: *common
        container_name: agenta-traefik

        image: traefik:v2.10
        ports:
            - "${AGENTA_PORT:-80}:${AGENTA_PORT:-80}"
            - "8080:8080"

        command: --api.dashboard=true --api.insecure=true --providers.docker --entrypoints.web.address=:${AGENTA_PORT:-80}
        
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    agenta-web:
        <<: *common
        container_name: agenta-web

        image: ghcr.io/agenta-ai/agenta-web
        ports:
            - "3000:3000"

        labels:
            - "traefik.http.routers.agenta-web.rule=Host(`${AGENTA_BARE_DOMAIN}`) && PathPrefix(`/`)"
            - "traefik.http.routers.agenta-web.entrypoints=web"
            - "traefik.http.services.agenta-web.loadbalancer.server.port=3000"
        
        environment:
            - NEXT_PUBLIC_AGENTA_API_URL=${AGENTA_API_URL}
            - NEXT_PUBLIC_POSTHOG_API_KEY=${POSTHOG_API_KEY}
            - NEXT_PUBLIC_POSTHOG_ENABLED=${POSTHOG_ENABLED}
            - NEXT_PUBLIC_LICENSE=${LICENSE}

    agenta-backend:
        <<: *common
        container_name: agenta-backend
        
        image: ghcr.io/agenta-ai/agenta-backend

        depends_on:
            postgres:
                condition: service_healthy
            apply_alembic_migration:
                condition: service_completed_successfully
        
        command:
            [
                "uvicorn",
                "agenta_backend.main:app",
                "--host",
                "0.0.0.0",
                "--port",
                "8000",
                "--reload",
                "--log-level",
                "info",
                "--root-path",
                "/api",
            ]

        volumes:
            - /var/run/docker.sock:/var/run/docker.sock


    apply_alembic_migration:
        <<: *common
        container_name: agenta-alembic

        image: ghcr.io/agenta-ai/agenta-backend

        depends_on:
            postgres:
                condition: service_healthy
        restart: no

        command: sh -c "python -c 'from agenta_backend.migrations.postgres.utils import run_alembic_migration; run_alembic_migration()'"
        
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./agenta-backend/migrations:/app/migrations
            - ./agenta-backend/agenta_backend:/app/agenta_backend

    redis:
        <<: *common
        container_name: agenta-redis

        image: redis:latest

        volumes:
            - redis_data:/data

    rabbitmq:
        <<: *common
        container_name: agenta-rabbitmq
        
        image: rabbitmq:3-management
        
        ports:
            - "5672:5672"
            - "15672:15672"

        volumes:
            - ./rabbitmq_data:/var/lib/rabbitmq

    celery_worker:
        <<: *common
        container_name: agenta-worker

        image: ghcr.io/agenta-ai/agenta-backend

        depends_on:
            - postgres
            - rabbitmq
            - redis

        command: >
            celery -A agenta_backend.main.celery_app worker --concurrency=1 --loglevel=INFO
        
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    postgres:
        <<: *common
        container_name: agenta-postgres
        
        image: postgres:16.2
        ports:
            - "5432:5432"

        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB'"]
            interval: 10s
            timeout: 5s
            retries: 5

        volumes:
            - postgresdb-data:/var/lib/postgresql/data/
            - ./docker-assets/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_DB=${POSTGRES_DB}

    completion:
        <<: *services
        container_name: agenta-completion

        image: ghcr.io/agenta-ai/agenta-completion

        environment:
            - SERVICE_NAME=completion
        
    chat:
        <<: *services
        container_name: agenta-chat

        image: ghcr.io/agenta-ai/agenta-chat

        environment:
            - SERVICE_NAME=chat
        

    pgadmin:
        <<: *common
        container_name: agenta-pgadmin
        
        image: dpage/pgadmin4

        ports:
            - "5050:80"

        depends_on:
            postgres:
                condition: service_healthy
        
        volumes:
            - pgadmin-data:/var/lib/pgadmin

networks:
    agenta-network:
        name: agenta-network

volumes:
    postgresdb-data:
    redis_data:
    pgadmin-data:
