@host = http://localhost
@token = change-me
@base_url = {{host}}/api/preview/tracing

###
# @name create_account
POST {{host}}/api/admin/account
Content-Type: application/json
Authorization: Access {{token}}

###
@user_id = {{create_account.response.body.user.id}}
@authorization = {{create_account.response.body.scopes[0].credentials}}

###
POST {{base_url}}/spans/
Content-Type: application/json
Authorization: {{authorization}}

{
  "spans": [
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000000", "attributes": { "key1": "value1", "key2": "value2" } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000001", "attributes": { "key1": "value3", "key2": "value4" } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000002", "attributes": { "key_null": null } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000003", "attributes": { "key_bool": true } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000004", "attributes": { "key_int": 42 } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000005", "attributes": { "key_float": 3.14 } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000006", "attributes": { "key_str": "example" } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000007", "attributes": { "key_array_null": [null, null] } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000008", "attributes": { "key_array_bool": [true, false] } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000009", "attributes": { "key_array_int": [1, 2, 3] } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000010", "attributes": { "key_array_float": [1.1, 2.2, 3.3] } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000011", "attributes": { "key_array_str": ["a", "b", "c"] } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000012", "attributes": { "key_nested": { "nested_key": "nested_value" } } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000013", "attributes": { "key_multiple": { "key1": "value1", "key2": 3, "key3": true } } },
    { "trace_id": "10000000000000000000000000000000", "span_id": "1000000000000014", "attributes": { "key_multiple": { "key1": "value1", "key2": 2, "key3": true } } }
  ]
}

###
# test: filter by attribute key1 = value1
GET {{base_url}}/spans/?filter={"conditions":[{"field":"attributes", "key":"key1", "value":"value1"}]}
Authorization: {{authorization}}

###
# test: filter by attribute key2 != value2
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key2", "operator": "is_not", "value": "value2" },
      { "field": "attributes", "key": "key2", "operator": "exists" }
    ]
  }
}

###
# test: filter by attribute key_null = null
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_null", "value": null }
    ]
  }
}

###
# test: filter by attribute key_bool = true
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_bool", "value": true }
    ]
  }
}

###
# test: filter by attribute key_int = 42
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "value": 42 }
    ]
  }
}

###
# test: filter by attribute key_float = 3.14
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_float", "value": 3.14 }
    ]
  }
}

###
# test: filter by attribute key_str = "example"
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_str", "value": "example" }
    ]
  }
}

###
# test: filter by nested attribute key_nested.nested_key = "nested_value"
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_nested.nested_key", "value": "nested_value" }
    ]
  }
}

###
# test: filter by multiple attributes key_multiple.key1 = "value1"
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_multiple.key1", "value": "value1" },
      { "field": "attributes", "key": "key_multiple.key2", "operator": "is_not", "value": 2 },
      { "field": "attributes", "key": "key_multiple.key3", "value": true }
    ]
  }
}

###
# test: logical operator NOT
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "operator": "not",
    "conditions": [
      { "field": "attributes", "key": "key1", "value": "value3" }
    ]
  }
}

###
# test: logical operator AND
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "operator": "and",
    "conditions": [
      { "field": "attributes", "key": "key1", "value": "value3" },
      { "field": "attributes", "key": "key2", "value": "value4" }
    ]
  }
}

###
# test: logical operator OR
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "operator": "or",
    "conditions": [
      { "field": "attributes", "key": "key_bool", "value": true },
      { "field": "attributes", "key": "key_int", "value": 42 }
    ]
  }
}

###
# test: logical operator NAND
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "operator": "nand",
    "conditions": [
      { "field": "attributes", "key": "key1", "value": "value3" },
      { "field": "attributes", "key": "key2", "value": "value4" }
    ]
  }
}

###
# test: logical operator SPECIAL COMBO
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key1", "value": "value3", "operator": "is_not" },
      { "field": "attributes", "key": "key1", "operator": "exists" }
    ]
  }
}

###
# test: logical operator NOR
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "operator": "nor",
    "conditions": [
      { "field": "attributes", "key": "key_bool", "value": true },
      { "field": "attributes", "key": "key_int", "value": 42 }
    ]
  }
}

###
# test: numeric operator GT (greater than)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "gt", "value": 40 }
    ]
  }
}

###
# test: numeric operator LT (less than)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "lt", "value": 50 }
    ]
  }
}

###
# test: numeric operator GTE (greater than or equal)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "gte", "value": 42 }
    ]
  }
}

###
# test: numeric operator LTE (less than or equal)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "lte", "value": 42 }
    ]
  }
}

###
# test: numeric operator EQ (equal)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "eq", "value": 42 }
    ]
  }
}

###
# test: numeric operator EQ (equal)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "eq", "value": 43 }
    ]
  }
}


###
# test: numeric operator NEQ (not equal)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "neq", "value": 50 }
    ]
  }
}

###
# test: numeric operator BETWEEN (inclusive range)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_int", "operator": "btwn", "value": [40, 50] }
    ]
  }
}

###
# test: string operator STARTSWITH
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_str", "operator": "startswith", "value": "exa" }
    ]
  }
}

###
# test: string operator ENDSWITH
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_str", "operator": "endswith", "value": "ple" }
    ]
  }
}

###
# test: string operator CONTAINS
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_str", "operator": "contains", "value": "amp" }
    ]
  }
}

###
# test: string operator MATCHES
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_str", "operator": "matches", "value": "exa" }
    ]
  }
}

###
# test: string operator LIKE (SQL-like pattern)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_str", "operator": "like", "value": "%exa%ple%" }
    ]
  }
}

###
# test: list operator IN (positive case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "in", "value": [1, 2, 3] }
    ]
  }
}

###
# test: list operator IN (negative case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "in", "value": [4, 5, 6] }
    ]
  }
}

###
# test: list operator NOT_IN (negative case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "not_in", "value": [1, 2, 3] }
    ]
  }
}

###
# test: list operator NOT_IN (positive case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "not_in", "value": [4, 5, 6] }
    ]
  }
}

###
# test: list operator HAS (positive case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "has", "value": [1] }
    ]
  }
}

###
# test: list operator HAS (negative case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "has", "value": [4] }
    ]
  }
}

###
# test: list operator HAS_NOT (negative case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "has_not", "value": [1] }
    ]
  }
}

###
# test: list operator HAS_NOT (positive case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_array_int", "operator": "has_not", "value": [4] }
    ]
  }
}



###
# test: existence operator EXISTS (positive case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_null", "operator": "exists" }
    ]
  }
}

###
# test: existence operator EXISTS (negative case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_nonexistent", "operator": "exists" }
    ]
  }
}

###
# test: existence operator NOT_EXISTS (positive case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_nonexistent", "operator": "not_exists" }
    ]
  }
}

###
# test: existence operator NOT_EXISTS (negative case)
POST {{base_url}}/spans/query
Content-Type: application/json
Authorization: {{authorization}}

{
  "filter": {
    "conditions": [
      { "field": "attributes", "key": "key_null", "operator": "not_exists" }
    ]
  }
}
