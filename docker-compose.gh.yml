services:
    reverse-proxy:
        image: traefik:v2.10
        command: --api.dashboard=true --api.insecure=true --providers.docker --entrypoints.web.address=:80
        ports:
            - "80:80"
            - "8080:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - agenta-network
        restart: always

    agenta-backend:
        container_name: agenta-backend-1
        image: ghcr.io/agenta-ai/agenta-backend
        environment:
            - POSTGRES_URI=postgresql+asyncpg://username:password@postgres:5432/agenta_oss
            - REDIS_URL=redis://redis:6379/0
            - ENVIRONMENT=production
            - DATABASE_MODE=v2
            - FEATURE_FLAG=oss
            - AGENTA_TEMPLATE_REPO=agentaai/templates_v2
            - POSTHOG_API_KEY=phc_hmVSxIjTW1REBHXgj2aw4HW9X6CXb6FzerBgP9XenC7
            - BARE_DOMAIN_NAME=${BARE_DOMAIN_NAME:-localhost}
            - DOMAIN_NAME=${DOMAIN_NAME:-http://localhost}
            - CELERY_BROKER_URL=amqp://guest@rabbitmq//
            - CELERY_RESULT_BACKEND=redis://redis:6379/0
            - TEMPLATES_BASE_URL=https://llm-app-json.s3.eu-central-1.amazonaws.com
            - REGISTRY_REPO_NAME=agentaai
            - DOCKER_HUB_URL=https://hub.docker.com/v2/repositories
        command:
            [
                "uvicorn",
                "agenta_backend.main:app",
                "--host",
                "0.0.0.0",
                "--port",
                "8000",
                "--reload",
                "--log-level",
                "info",
                "--root-path",
                "/api",
            ]
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        labels:
            - "traefik.http.routers.backend.rule=PathPrefix(`/api/`)"
            - "traefik.http.routers.backend.entrypoints=web"
            - "traefik.http.middlewares.backend-strip.stripprefix.prefixes=/api"
            - "traefik.http.middlewares.backend-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.backend.middlewares=backend-strip"
            - "traefik.http.services.backend.loadbalancer.server.port=8000"
            - "traefik.http.routers.backend.service=backend"
        networks:
            - agenta-network
        extra_hosts:
            - "host.docker.internal:host-gateway"
        depends_on:
            postgres:
                condition: service_healthy
        restart: always

    agenta-web:
        container_name: agenta-web-1
        image: ghcr.io/agenta-ai/agenta-web
        ports:
            - "3000:3000"
        networks:
            - agenta-network
        labels:
            - "traefik.http.routers.agenta-web.rule=PathPrefix(`/`)"
            - "traefik.http.routers.agenta-web.entrypoints=web"
            - "traefik.http.services.agenta-web.loadbalancer.server.port=3000"
        environment:
            - NEXT_PUBLIC_POSTHOG_API_KEY=phc_hmVSxIjTW1REBHXgj2aw4HW9X6CXb6FzerBgP9XenC7
            - NEXT_PUBLIC_AGENTA_API_URL=${DOMAIN_NAME:-http://localhost}
            - NEXT_PUBLIC_FF=oss
            - NEXT_PUBLIC_TELEMETRY_TRACKING_ENABLED=true
        restart: always

    redis:
        image: redis:latest
        networks:
            - agenta-network
        volumes:
            - redis_data:/data
        restart: always

    rabbitmq:
        image: rabbitmq:3-management
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - ./rabbitmq_data:/var/lib/rabbitmq
        environment:
            RABBITMQ_DEFAULT_USER: "guest"
            RABBITMQ_DEFAULT_PASS: "guest"
        networks:
            - agenta-network

    celery_worker:
        container_name: celery-worker-1
        image: ghcr.io/agenta-ai/agenta-backend
        command: >
            celery -A agenta_backend.main.celery_app worker --concurrency=1 --loglevel=INFO
        environment:
            - POSTGRES_URI=postgresql+asyncpg://username:password@postgres:5432/agenta_oss
            - REDIS_URL=redis://redis:6379/0
            - CELERY_BROKER_URL=amqp://guest@rabbitmq//
            - CELERY_RESULT_BACKEND=redis://redis:6379/0
            - FEATURE_FLAG=oss
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - postgres
            - rabbitmq
            - redis
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - agenta-network

    postgres:
        image: postgres:16.2
        container_name: postgres
        restart: always
        environment:
            POSTGRES_USER: username
            POSTGRES_PASSWORD: password
            POSTGRES_DB: agenta_oss
        ports:
            - "5432:5432"
        networks:
            - agenta-network
        volumes:
            - postgresdb-data:/var/lib/postgresql/data/
            - ./docker-assets/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    pgadmin:
        image: dpage/pgadmin4
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: "admin@example.com"
            PGADMIN_DEFAULT_PASSWORD: "password"
            PGADMIN_SERVER_HOST: "postgres"
            PGADMIN_SERVER_PORT: 5432
            PGADMIN_SERVER_USER: "username"
            PGADMIN_SERVER_PASSWORD: "password"
            PGADMIN_SERVER_DB: agenta_oss
        ports:
            - "5050:80"
        networks:
            - agenta-network
        volumes:
            - pgadmin-data:/var/lib/pgadmin
        depends_on:
            postgres:
                condition: service_healthy

networks:
    agenta-network:
        name: agenta-network

volumes:
    redis_data:
    postgresdb-data:
    pgadmin-data:
